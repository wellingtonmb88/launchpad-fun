/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLaunchPadTokenStatusDecoder,
  getLaunchPadTokenStatusEncoder,
  type LaunchPadTokenStatus,
  type LaunchPadTokenStatusArgs,
} from '../types';

export const LAUNCH_PAD_TOKEN_DISCRIMINATOR = new Uint8Array([2]);

export function getLaunchPadTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    LAUNCH_PAD_TOKEN_DISCRIMINATOR
  );
}

export type LaunchPadToken = {
  discriminator: ReadonlyUint8Array;
  /** The creator of the launch pad token */
  creator: Address;
  /** The mint address of the launch pad token */
  mint: Address;
  /** Total virtual reserve of the token */
  virtualTokenAmount: bigint;
  /** Total virtual reserve of the asset */
  virtualAssetAmount: bigint;
  /** The liquidity pool invariant k = x * y */
  currentK: bigint;
  /** Total virtual reserve amount for graduation */
  virtualGraduationAmount: bigint;
  /** The timestamp when the token graduated */
  graduatedAt: bigint;
  /** The timestamp when the token was created */
  createdAt: bigint;
  /** The current status of the launch pad token */
  status: LaunchPadTokenStatus;
  /** The bump seed for the PDA */
  bump: number;
  vaultBump: number;
};

export type LaunchPadTokenArgs = {
  /** The creator of the launch pad token */
  creator: Address;
  /** The mint address of the launch pad token */
  mint: Address;
  /** Total virtual reserve of the token */
  virtualTokenAmount: number | bigint;
  /** Total virtual reserve of the asset */
  virtualAssetAmount: number | bigint;
  /** The liquidity pool invariant k = x * y */
  currentK: number | bigint;
  /** Total virtual reserve amount for graduation */
  virtualGraduationAmount: number | bigint;
  /** The timestamp when the token graduated */
  graduatedAt: number | bigint;
  /** The timestamp when the token was created */
  createdAt: number | bigint;
  /** The current status of the launch pad token */
  status: LaunchPadTokenStatusArgs;
  /** The bump seed for the PDA */
  bump: number;
  vaultBump: number;
};

export function getLaunchPadTokenEncoder(): FixedSizeEncoder<LaunchPadTokenArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['creator', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['virtualTokenAmount', getU64Encoder()],
      ['virtualAssetAmount', getU64Encoder()],
      ['currentK', getU128Encoder()],
      ['virtualGraduationAmount', getU64Encoder()],
      ['graduatedAt', getI64Encoder()],
      ['createdAt', getI64Encoder()],
      ['status', getLaunchPadTokenStatusEncoder()],
      ['bump', getU8Encoder()],
      ['vaultBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LAUNCH_PAD_TOKEN_DISCRIMINATOR })
  );
}

export function getLaunchPadTokenDecoder(): FixedSizeDecoder<LaunchPadToken> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['creator', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['virtualTokenAmount', getU64Decoder()],
    ['virtualAssetAmount', getU64Decoder()],
    ['currentK', getU128Decoder()],
    ['virtualGraduationAmount', getU64Decoder()],
    ['graduatedAt', getI64Decoder()],
    ['createdAt', getI64Decoder()],
    ['status', getLaunchPadTokenStatusDecoder()],
    ['bump', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
  ]);
}

export function getLaunchPadTokenCodec(): FixedSizeCodec<
  LaunchPadTokenArgs,
  LaunchPadToken
> {
  return combineCodec(getLaunchPadTokenEncoder(), getLaunchPadTokenDecoder());
}

export function decodeLaunchPadToken<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<LaunchPadToken, TAddress>;
export function decodeLaunchPadToken<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<LaunchPadToken, TAddress>;
export function decodeLaunchPadToken<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<LaunchPadToken, TAddress> | MaybeAccount<LaunchPadToken, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLaunchPadTokenDecoder()
  );
}

export async function fetchLaunchPadToken<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<LaunchPadToken, TAddress>> {
  const maybeAccount = await fetchMaybeLaunchPadToken(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLaunchPadToken<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<LaunchPadToken, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLaunchPadToken(maybeAccount);
}

export async function fetchAllLaunchPadToken(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<LaunchPadToken>[]> {
  const maybeAccounts = await fetchAllMaybeLaunchPadToken(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLaunchPadToken(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<LaunchPadToken>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLaunchPadToken(maybeAccount)
  );
}

export function getLaunchPadTokenSize(): number {
  return 124;
}
