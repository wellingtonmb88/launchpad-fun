/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getProtocolStatusDecoder,
  getProtocolStatusEncoder,
  type ProtocolStatus,
  type ProtocolStatusArgs,
} from '../types';

export const LAUNCH_PAD_CONFIG_DISCRIMINATOR = new Uint8Array([1]);

export function getLaunchPadConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    LAUNCH_PAD_CONFIG_DISCRIMINATOR
  );
}

export type LaunchPadConfig = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  assetRate: bigint;
  creatorSellDelay: bigint;
  graduateThreshold: bigint;
  protocolBuyFee: number;
  protocolSellFee: number;
  status: ProtocolStatus;
  bump: number;
  vaultBump: number;
};

export type LaunchPadConfigArgs = {
  authority: Address;
  assetRate: number | bigint;
  creatorSellDelay: number | bigint;
  graduateThreshold: number | bigint;
  protocolBuyFee: number;
  protocolSellFee: number;
  status: ProtocolStatusArgs;
  bump: number;
  vaultBump: number;
};

export function getLaunchPadConfigEncoder(): FixedSizeEncoder<LaunchPadConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['authority', getAddressEncoder()],
      ['assetRate', getU64Encoder()],
      ['creatorSellDelay', getU64Encoder()],
      ['graduateThreshold', getU64Encoder()],
      ['protocolBuyFee', getU32Encoder()],
      ['protocolSellFee', getU32Encoder()],
      ['status', getProtocolStatusEncoder()],
      ['bump', getU8Encoder()],
      ['vaultBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LAUNCH_PAD_CONFIG_DISCRIMINATOR })
  );
}

export function getLaunchPadConfigDecoder(): FixedSizeDecoder<LaunchPadConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['authority', getAddressDecoder()],
    ['assetRate', getU64Decoder()],
    ['creatorSellDelay', getU64Decoder()],
    ['graduateThreshold', getU64Decoder()],
    ['protocolBuyFee', getU32Decoder()],
    ['protocolSellFee', getU32Decoder()],
    ['status', getProtocolStatusDecoder()],
    ['bump', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
  ]);
}

export function getLaunchPadConfigCodec(): FixedSizeCodec<
  LaunchPadConfigArgs,
  LaunchPadConfig
> {
  return combineCodec(getLaunchPadConfigEncoder(), getLaunchPadConfigDecoder());
}

export function decodeLaunchPadConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<LaunchPadConfig, TAddress>;
export function decodeLaunchPadConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<LaunchPadConfig, TAddress>;
export function decodeLaunchPadConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<LaunchPadConfig, TAddress>
  | MaybeAccount<LaunchPadConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLaunchPadConfigDecoder()
  );
}

export async function fetchLaunchPadConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<LaunchPadConfig, TAddress>> {
  const maybeAccount = await fetchMaybeLaunchPadConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLaunchPadConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<LaunchPadConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLaunchPadConfig(maybeAccount);
}

export async function fetchAllLaunchPadConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<LaunchPadConfig>[]> {
  const maybeAccounts = await fetchAllMaybeLaunchPadConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLaunchPadConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<LaunchPadConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLaunchPadConfig(maybeAccount)
  );
}

export function getLaunchPadConfigSize(): number {
  return 68;
}
