/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPAD_FUN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_TOKEN_DISCRIMINATOR = new Uint8Array([
  84, 52, 204, 228, 24, 140, 234, 75,
]);

export function getCreateTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TOKEN_DISCRIMINATOR
  );
}

export type CreateTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountLaunchPadConfig extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountLaunchPadToken extends string | AccountMeta<string> = string,
  TAccountLaunchPadTokenAccount extends string | AccountMeta<string> = string,
  TAccountVaultGraduation extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountLaunchPadConfig extends string
        ? ReadonlyAccount<TAccountLaunchPadConfig>
        : TAccountLaunchPadConfig,
      TAccountMint extends string
        ? WritableSignerAccount<TAccountMint> & AccountSignerMeta<TAccountMint>
        : TAccountMint,
      TAccountLaunchPadToken extends string
        ? WritableAccount<TAccountLaunchPadToken>
        : TAccountLaunchPadToken,
      TAccountLaunchPadTokenAccount extends string
        ? WritableAccount<TAccountLaunchPadTokenAccount>
        : TAccountLaunchPadTokenAccount,
      TAccountVaultGraduation extends string
        ? WritableAccount<TAccountVaultGraduation>
        : TAccountVaultGraduation,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  symbol: string;
  uri: string;
};

export type CreateTokenInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
};

export function getCreateTokenInstructionDataEncoder(): Encoder<CreateTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_TOKEN_DISCRIMINATOR })
  );
}

export function getCreateTokenInstructionDataDecoder(): Decoder<CreateTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateTokenInstructionDataCodec(): Codec<
  CreateTokenInstructionDataArgs,
  CreateTokenInstructionData
> {
  return combineCodec(
    getCreateTokenInstructionDataEncoder(),
    getCreateTokenInstructionDataDecoder()
  );
}

export type CreateTokenAsyncInput<
  TAccountCreator extends string = string,
  TAccountLaunchPadConfig extends string = string,
  TAccountMint extends string = string,
  TAccountLaunchPadToken extends string = string,
  TAccountLaunchPadTokenAccount extends string = string,
  TAccountVaultGraduation extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  launchPadConfig?: Address<TAccountLaunchPadConfig>;
  mint: TransactionSigner<TAccountMint>;
  launchPadToken?: Address<TAccountLaunchPadToken>;
  launchPadTokenAccount?: Address<TAccountLaunchPadTokenAccount>;
  vaultGraduation?: Address<TAccountVaultGraduation>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  name: CreateTokenInstructionDataArgs['name'];
  symbol: CreateTokenInstructionDataArgs['symbol'];
  uri: CreateTokenInstructionDataArgs['uri'];
};

export async function getCreateTokenInstructionAsync<
  TAccountCreator extends string,
  TAccountLaunchPadConfig extends string,
  TAccountMint extends string,
  TAccountLaunchPadToken extends string,
  TAccountLaunchPadTokenAccount extends string,
  TAccountVaultGraduation extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
>(
  input: CreateTokenAsyncInput<
    TAccountCreator,
    TAccountLaunchPadConfig,
    TAccountMint,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountVaultGraduation,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateTokenInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountLaunchPadConfig,
    TAccountMint,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountVaultGraduation,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LAUNCHPAD_FUN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    launchPadConfig: {
      value: input.launchPadConfig ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: true },
    launchPadToken: { value: input.launchPadToken ?? null, isWritable: true },
    launchPadTokenAccount: {
      value: input.launchPadTokenAccount ?? null,
      isWritable: true,
    },
    vaultGraduation: { value: input.vaultGraduation ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.launchPadConfig.value) {
    accounts.launchPadConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 95, 112, 97, 100, 95, 99, 111, 110, 102,
            105, 103, 58,
          ])
        ),
      ],
    });
  }
  if (!accounts.launchPadToken.value) {
    accounts.launchPadToken.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 95, 112, 97, 100, 95, 116, 111, 107,
            101, 110, 58,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.launchPadTokenAccount.value) {
    accounts.launchPadTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.launchPadConfig.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.vaultGraduation.value) {
    accounts.vaultGraduation.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 103, 114, 97, 100, 117, 97, 116, 105,
            111, 110, 58,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.launchPadConfig),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.launchPadToken),
      getAccountMeta(accounts.launchPadTokenAccount),
      getAccountMeta(accounts.vaultGraduation),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCreateTokenInstructionDataEncoder().encode(
      args as CreateTokenInstructionDataArgs
    ),
  } as CreateTokenInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountLaunchPadConfig,
    TAccountMint,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountVaultGraduation,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type CreateTokenInput<
  TAccountCreator extends string = string,
  TAccountLaunchPadConfig extends string = string,
  TAccountMint extends string = string,
  TAccountLaunchPadToken extends string = string,
  TAccountLaunchPadTokenAccount extends string = string,
  TAccountVaultGraduation extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  launchPadConfig: Address<TAccountLaunchPadConfig>;
  mint: TransactionSigner<TAccountMint>;
  launchPadToken: Address<TAccountLaunchPadToken>;
  launchPadTokenAccount: Address<TAccountLaunchPadTokenAccount>;
  vaultGraduation: Address<TAccountVaultGraduation>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  name: CreateTokenInstructionDataArgs['name'];
  symbol: CreateTokenInstructionDataArgs['symbol'];
  uri: CreateTokenInstructionDataArgs['uri'];
};

export function getCreateTokenInstruction<
  TAccountCreator extends string,
  TAccountLaunchPadConfig extends string,
  TAccountMint extends string,
  TAccountLaunchPadToken extends string,
  TAccountLaunchPadTokenAccount extends string,
  TAccountVaultGraduation extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
>(
  input: CreateTokenInput<
    TAccountCreator,
    TAccountLaunchPadConfig,
    TAccountMint,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountVaultGraduation,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTokenInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountLaunchPadConfig,
  TAccountMint,
  TAccountLaunchPadToken,
  TAccountLaunchPadTokenAccount,
  TAccountVaultGraduation,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LAUNCHPAD_FUN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    launchPadConfig: {
      value: input.launchPadConfig ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: true },
    launchPadToken: { value: input.launchPadToken ?? null, isWritable: true },
    launchPadTokenAccount: {
      value: input.launchPadTokenAccount ?? null,
      isWritable: true,
    },
    vaultGraduation: { value: input.vaultGraduation ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.launchPadConfig),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.launchPadToken),
      getAccountMeta(accounts.launchPadTokenAccount),
      getAccountMeta(accounts.vaultGraduation),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCreateTokenInstructionDataEncoder().encode(
      args as CreateTokenInstructionDataArgs
    ),
  } as CreateTokenInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountLaunchPadConfig,
    TAccountMint,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountVaultGraduation,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedCreateTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    launchPadConfig: TAccountMetas[1];
    mint: TAccountMetas[2];
    launchPadToken: TAccountMetas[3];
    launchPadTokenAccount: TAccountMetas[4];
    vaultGraduation: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
  };
  data: CreateTokenInstructionData;
};

export function parseCreateTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      launchPadConfig: getNextAccount(),
      mint: getNextAccount(),
      launchPadToken: getNextAccount(),
      launchPadTokenAccount: getNextAccount(),
      vaultGraduation: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getCreateTokenInstructionDataDecoder().decode(instruction.data),
  };
}
