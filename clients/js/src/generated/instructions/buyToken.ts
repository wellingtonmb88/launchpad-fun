/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPAD_FUN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const BUY_TOKEN_DISCRIMINATOR = new Uint8Array([
  138, 127, 14, 91, 38, 87, 115, 105,
]);

export function getBuyTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_TOKEN_DISCRIMINATOR);
}

export type BuyTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
  TAccountInvestor extends string | AccountMeta<string> = string,
  TAccountLaunchPadConfig extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountVaultGraduation extends string | AccountMeta<string> = string,
  TAccountLaunchPadToken extends string | AccountMeta<string> = string,
  TAccountLaunchPadTokenAccount extends string | AccountMeta<string> = string,
  TAccountInvestorTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountInvestor extends string
        ? WritableSignerAccount<TAccountInvestor> &
            AccountSignerMeta<TAccountInvestor>
        : TAccountInvestor,
      TAccountLaunchPadConfig extends string
        ? ReadonlyAccount<TAccountLaunchPadConfig>
        : TAccountLaunchPadConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountVaultGraduation extends string
        ? WritableAccount<TAccountVaultGraduation>
        : TAccountVaultGraduation,
      TAccountLaunchPadToken extends string
        ? WritableAccount<TAccountLaunchPadToken>
        : TAccountLaunchPadToken,
      TAccountLaunchPadTokenAccount extends string
        ? WritableAccount<TAccountLaunchPadTokenAccount>
        : TAccountLaunchPadTokenAccount,
      TAccountInvestorTokenAccount extends string
        ? WritableAccount<TAccountInvestorTokenAccount>
        : TAccountInvestorTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BuyTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type BuyTokenInstructionDataArgs = { amount: number | bigint };

export function getBuyTokenInstructionDataEncoder(): FixedSizeEncoder<BuyTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BUY_TOKEN_DISCRIMINATOR })
  );
}

export function getBuyTokenInstructionDataDecoder(): FixedSizeDecoder<BuyTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getBuyTokenInstructionDataCodec(): FixedSizeCodec<
  BuyTokenInstructionDataArgs,
  BuyTokenInstructionData
> {
  return combineCodec(
    getBuyTokenInstructionDataEncoder(),
    getBuyTokenInstructionDataDecoder()
  );
}

export type BuyTokenAsyncInput<
  TAccountInvestor extends string = string,
  TAccountLaunchPadConfig extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountVaultGraduation extends string = string,
  TAccountLaunchPadToken extends string = string,
  TAccountLaunchPadTokenAccount extends string = string,
  TAccountInvestorTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  investor: TransactionSigner<TAccountInvestor>;
  launchPadConfig?: Address<TAccountLaunchPadConfig>;
  vault?: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  vaultGraduation?: Address<TAccountVaultGraduation>;
  launchPadToken?: Address<TAccountLaunchPadToken>;
  launchPadTokenAccount?: Address<TAccountLaunchPadTokenAccount>;
  investorTokenAccount?: Address<TAccountInvestorTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: BuyTokenInstructionDataArgs['amount'];
};

export async function getBuyTokenInstructionAsync<
  TAccountInvestor extends string,
  TAccountLaunchPadConfig extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountVaultGraduation extends string,
  TAccountLaunchPadToken extends string,
  TAccountLaunchPadTokenAccount extends string,
  TAccountInvestorTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
>(
  input: BuyTokenAsyncInput<
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountInvestorTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyTokenInstruction<
    TProgramAddress,
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountInvestorTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LAUNCHPAD_FUN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    investor: { value: input.investor ?? null, isWritable: true },
    launchPadConfig: {
      value: input.launchPadConfig ?? null,
      isWritable: false,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vaultGraduation: { value: input.vaultGraduation ?? null, isWritable: true },
    launchPadToken: { value: input.launchPadToken ?? null, isWritable: true },
    launchPadTokenAccount: {
      value: input.launchPadTokenAccount ?? null,
      isWritable: true,
    },
    investorTokenAccount: {
      value: input.investorTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.launchPadConfig.value) {
    accounts.launchPadConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 95, 112, 97, 100, 95, 99, 111, 110, 102,
            105, 103, 58,
          ])
        ),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116, 58])),
      ],
    });
  }
  if (!accounts.vaultGraduation.value) {
    accounts.vaultGraduation.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 103, 114, 97, 100, 117, 97, 116, 105,
            111, 110, 58,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.launchPadToken.value) {
    accounts.launchPadToken.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 95, 112, 97, 100, 95, 116, 111, 107,
            101, 110, 58,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.launchPadTokenAccount.value) {
    accounts.launchPadTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.launchPadConfig.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.investorTokenAccount.value) {
    accounts.investorTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.investor.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.launchPadConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vaultGraduation),
      getAccountMeta(accounts.launchPadToken),
      getAccountMeta(accounts.launchPadTokenAccount),
      getAccountMeta(accounts.investorTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBuyTokenInstructionDataEncoder().encode(
      args as BuyTokenInstructionDataArgs
    ),
  } as BuyTokenInstruction<
    TProgramAddress,
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountInvestorTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type BuyTokenInput<
  TAccountInvestor extends string = string,
  TAccountLaunchPadConfig extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountVaultGraduation extends string = string,
  TAccountLaunchPadToken extends string = string,
  TAccountLaunchPadTokenAccount extends string = string,
  TAccountInvestorTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  investor: TransactionSigner<TAccountInvestor>;
  launchPadConfig: Address<TAccountLaunchPadConfig>;
  vault: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  vaultGraduation: Address<TAccountVaultGraduation>;
  launchPadToken: Address<TAccountLaunchPadToken>;
  launchPadTokenAccount: Address<TAccountLaunchPadTokenAccount>;
  investorTokenAccount: Address<TAccountInvestorTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: BuyTokenInstructionDataArgs['amount'];
};

export function getBuyTokenInstruction<
  TAccountInvestor extends string,
  TAccountLaunchPadConfig extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountVaultGraduation extends string,
  TAccountLaunchPadToken extends string,
  TAccountLaunchPadTokenAccount extends string,
  TAccountInvestorTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
>(
  input: BuyTokenInput<
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountInvestorTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BuyTokenInstruction<
  TProgramAddress,
  TAccountInvestor,
  TAccountLaunchPadConfig,
  TAccountVault,
  TAccountMint,
  TAccountVaultGraduation,
  TAccountLaunchPadToken,
  TAccountLaunchPadTokenAccount,
  TAccountInvestorTokenAccount,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LAUNCHPAD_FUN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    investor: { value: input.investor ?? null, isWritable: true },
    launchPadConfig: {
      value: input.launchPadConfig ?? null,
      isWritable: false,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vaultGraduation: { value: input.vaultGraduation ?? null, isWritable: true },
    launchPadToken: { value: input.launchPadToken ?? null, isWritable: true },
    launchPadTokenAccount: {
      value: input.launchPadTokenAccount ?? null,
      isWritable: true,
    },
    investorTokenAccount: {
      value: input.investorTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.launchPadConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vaultGraduation),
      getAccountMeta(accounts.launchPadToken),
      getAccountMeta(accounts.launchPadTokenAccount),
      getAccountMeta(accounts.investorTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBuyTokenInstructionDataEncoder().encode(
      args as BuyTokenInstructionDataArgs
    ),
  } as BuyTokenInstruction<
    TProgramAddress,
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountInvestorTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedBuyTokenInstruction<
  TProgram extends string = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    investor: TAccountMetas[0];
    launchPadConfig: TAccountMetas[1];
    vault: TAccountMetas[2];
    mint: TAccountMetas[3];
    vaultGraduation: TAccountMetas[4];
    launchPadToken: TAccountMetas[5];
    launchPadTokenAccount: TAccountMetas[6];
    investorTokenAccount: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: BuyTokenInstructionData;
};

export function parseBuyTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      investor: getNextAccount(),
      launchPadConfig: getNextAccount(),
      vault: getNextAccount(),
      mint: getNextAccount(),
      vaultGraduation: getNextAccount(),
      launchPadToken: getNextAccount(),
      launchPadTokenAccount: getNextAccount(),
      investorTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBuyTokenInstructionDataDecoder().decode(instruction.data),
  };
}
