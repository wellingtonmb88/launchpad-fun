/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPAD_FUN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const GRADUATE_TO_RAYDIUM_DISCRIMINATOR = new Uint8Array([
  59, 239, 35, 57, 13, 217, 40, 195,
]);

export function getGraduateToRaydiumDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GRADUATE_TO_RAYDIUM_DISCRIMINATOR
  );
}

export type GraduateToRaydiumInstruction<
  TProgram extends string = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
  TAccountInvestor extends string | AccountMeta<string> = string,
  TAccountLaunchPadConfig extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountVaultGraduation extends string | AccountMeta<string> = string,
  TAccountLaunchPadToken extends string | AccountMeta<string> = string,
  TAccountLaunchPadTokenAccount extends string | AccountMeta<string> = string,
  TAccountCpmmProgram extends
    | string
    | AccountMeta<string> = 'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb',
  TAccountAmmConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountWsolMint extends string | AccountMeta<string> = string,
  TAccountLpMint extends string | AccountMeta<string> = string,
  TAccountVaultGraduationTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountVaultAssetGraduationTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountLpToken extends string | AccountMeta<string> = string,
  TAccountToken0Vault extends string | AccountMeta<string> = string,
  TAccountToken1Vault extends string | AccountMeta<string> = string,
  TAccountCreatePoolFee extends
    | string
    | AccountMeta<string> = '3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy',
  TAccountObservationState extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountTokenProgram2022 extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountInvestor extends string
        ? WritableSignerAccount<TAccountInvestor> &
            AccountSignerMeta<TAccountInvestor>
        : TAccountInvestor,
      TAccountLaunchPadConfig extends string
        ? ReadonlyAccount<TAccountLaunchPadConfig>
        : TAccountLaunchPadConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountVaultGraduation extends string
        ? WritableAccount<TAccountVaultGraduation>
        : TAccountVaultGraduation,
      TAccountLaunchPadToken extends string
        ? WritableAccount<TAccountLaunchPadToken>
        : TAccountLaunchPadToken,
      TAccountLaunchPadTokenAccount extends string
        ? WritableAccount<TAccountLaunchPadTokenAccount>
        : TAccountLaunchPadTokenAccount,
      TAccountCpmmProgram extends string
        ? ReadonlyAccount<TAccountCpmmProgram>
        : TAccountCpmmProgram,
      TAccountAmmConfig extends string
        ? ReadonlyAccount<TAccountAmmConfig>
        : TAccountAmmConfig,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountWsolMint extends string
        ? ReadonlyAccount<TAccountWsolMint>
        : TAccountWsolMint,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountVaultGraduationTokenAccount extends string
        ? WritableAccount<TAccountVaultGraduationTokenAccount>
        : TAccountVaultGraduationTokenAccount,
      TAccountVaultAssetGraduationTokenAccount extends string
        ? WritableAccount<TAccountVaultAssetGraduationTokenAccount>
        : TAccountVaultAssetGraduationTokenAccount,
      TAccountLpToken extends string
        ? WritableAccount<TAccountLpToken>
        : TAccountLpToken,
      TAccountToken0Vault extends string
        ? WritableAccount<TAccountToken0Vault>
        : TAccountToken0Vault,
      TAccountToken1Vault extends string
        ? WritableAccount<TAccountToken1Vault>
        : TAccountToken1Vault,
      TAccountCreatePoolFee extends string
        ? WritableAccount<TAccountCreatePoolFee>
        : TAccountCreatePoolFee,
      TAccountObservationState extends string
        ? WritableAccount<TAccountObservationState>
        : TAccountObservationState,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountTokenProgram2022 extends string
        ? ReadonlyAccount<TAccountTokenProgram2022>
        : TAccountTokenProgram2022,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type GraduateToRaydiumInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GraduateToRaydiumInstructionDataArgs = {};

export function getGraduateToRaydiumInstructionDataEncoder(): FixedSizeEncoder<GraduateToRaydiumInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: GRADUATE_TO_RAYDIUM_DISCRIMINATOR })
  );
}

export function getGraduateToRaydiumInstructionDataDecoder(): FixedSizeDecoder<GraduateToRaydiumInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGraduateToRaydiumInstructionDataCodec(): FixedSizeCodec<
  GraduateToRaydiumInstructionDataArgs,
  GraduateToRaydiumInstructionData
> {
  return combineCodec(
    getGraduateToRaydiumInstructionDataEncoder(),
    getGraduateToRaydiumInstructionDataDecoder()
  );
}

export type GraduateToRaydiumAsyncInput<
  TAccountInvestor extends string = string,
  TAccountLaunchPadConfig extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountVaultGraduation extends string = string,
  TAccountLaunchPadToken extends string = string,
  TAccountLaunchPadTokenAccount extends string = string,
  TAccountCpmmProgram extends string = string,
  TAccountAmmConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountWsolMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountVaultGraduationTokenAccount extends string = string,
  TAccountVaultAssetGraduationTokenAccount extends string = string,
  TAccountLpToken extends string = string,
  TAccountToken0Vault extends string = string,
  TAccountToken1Vault extends string = string,
  TAccountCreatePoolFee extends string = string,
  TAccountObservationState extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  investor: TransactionSigner<TAccountInvestor>;
  launchPadConfig?: Address<TAccountLaunchPadConfig>;
  vault?: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  vaultGraduation?: Address<TAccountVaultGraduation>;
  launchPadToken?: Address<TAccountLaunchPadToken>;
  launchPadTokenAccount?: Address<TAccountLaunchPadTokenAccount>;
  cpmmProgram?: Address<TAccountCpmmProgram>;
  /** Which config the pool belongs to. */
  ammConfig: Address<TAccountAmmConfig>;
  authority?: Address<TAccountAuthority>;
  poolState: Address<TAccountPoolState>;
  wsolMint: Address<TAccountWsolMint>;
  lpMint?: Address<TAccountLpMint>;
  vaultGraduationTokenAccount?: Address<TAccountVaultGraduationTokenAccount>;
  vaultAssetGraduationTokenAccount?: Address<TAccountVaultAssetGraduationTokenAccount>;
  lpToken: Address<TAccountLpToken>;
  token0Vault: Address<TAccountToken0Vault>;
  token1Vault: Address<TAccountToken1Vault>;
  /** create pool fee account */
  createPoolFee?: Address<TAccountCreatePoolFee>;
  observationState?: Address<TAccountObservationState>;
  tokenProgram?: Address<TAccountTokenProgram>;
  tokenProgram2022?: Address<TAccountTokenProgram2022>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export async function getGraduateToRaydiumInstructionAsync<
  TAccountInvestor extends string,
  TAccountLaunchPadConfig extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountVaultGraduation extends string,
  TAccountLaunchPadToken extends string,
  TAccountLaunchPadTokenAccount extends string,
  TAccountCpmmProgram extends string,
  TAccountAmmConfig extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountWsolMint extends string,
  TAccountLpMint extends string,
  TAccountVaultGraduationTokenAccount extends string,
  TAccountVaultAssetGraduationTokenAccount extends string,
  TAccountLpToken extends string,
  TAccountToken0Vault extends string,
  TAccountToken1Vault extends string,
  TAccountCreatePoolFee extends string,
  TAccountObservationState extends string,
  TAccountTokenProgram extends string,
  TAccountTokenProgram2022 extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
>(
  input: GraduateToRaydiumAsyncInput<
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountCpmmProgram,
    TAccountAmmConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountWsolMint,
    TAccountLpMint,
    TAccountVaultGraduationTokenAccount,
    TAccountVaultAssetGraduationTokenAccount,
    TAccountLpToken,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountCreatePoolFee,
    TAccountObservationState,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  GraduateToRaydiumInstruction<
    TProgramAddress,
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountCpmmProgram,
    TAccountAmmConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountWsolMint,
    TAccountLpMint,
    TAccountVaultGraduationTokenAccount,
    TAccountVaultAssetGraduationTokenAccount,
    TAccountLpToken,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountCreatePoolFee,
    TAccountObservationState,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LAUNCHPAD_FUN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    investor: { value: input.investor ?? null, isWritable: true },
    launchPadConfig: {
      value: input.launchPadConfig ?? null,
      isWritable: false,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vaultGraduation: { value: input.vaultGraduation ?? null, isWritable: true },
    launchPadToken: { value: input.launchPadToken ?? null, isWritable: true },
    launchPadTokenAccount: {
      value: input.launchPadTokenAccount ?? null,
      isWritable: true,
    },
    cpmmProgram: { value: input.cpmmProgram ?? null, isWritable: false },
    ammConfig: { value: input.ammConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    vaultGraduationTokenAccount: {
      value: input.vaultGraduationTokenAccount ?? null,
      isWritable: true,
    },
    vaultAssetGraduationTokenAccount: {
      value: input.vaultAssetGraduationTokenAccount ?? null,
      isWritable: true,
    },
    lpToken: { value: input.lpToken ?? null, isWritable: true },
    token0Vault: { value: input.token0Vault ?? null, isWritable: true },
    token1Vault: { value: input.token1Vault ?? null, isWritable: true },
    createPoolFee: { value: input.createPoolFee ?? null, isWritable: true },
    observationState: {
      value: input.observationState ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.launchPadConfig.value) {
    accounts.launchPadConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 95, 112, 97, 100, 95, 99, 111, 110, 102,
            105, 103, 58,
          ])
        ),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116, 58])),
      ],
    });
  }
  if (!accounts.vaultGraduation.value) {
    accounts.vaultGraduation.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 103, 114, 97, 100, 117, 97, 116, 105,
            111, 110, 58,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.launchPadToken.value) {
    accounts.launchPadToken.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 95, 112, 97, 100, 95, 116, 111, 107,
            101, 110, 58,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram2022.value) {
    accounts.tokenProgram2022.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.launchPadTokenAccount.value) {
    accounts.launchPadTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.launchPadConfig.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenProgram2022.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.cpmmProgram.value) {
    accounts.cpmmProgram.value =
      'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb' as Address<'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb'>;
  }
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress:
        'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb' as Address<'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 97, 117, 108, 116, 95, 97, 110, 100, 95, 108, 112, 95, 109,
            105, 110, 116, 95, 97, 117, 116, 104, 95, 115, 101, 101, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.lpMint.value) {
    accounts.lpMint.value = await getProgramDerivedAddress({
      programAddress:
        'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb' as Address<'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.poolState.value)),
      ],
    });
  }
  if (!accounts.vaultGraduationTokenAccount.value) {
    accounts.vaultGraduationTokenAccount.value = await getProgramDerivedAddress(
      {
        programAddress,
        seeds: [
          getBytesEncoder().encode(
            new Uint8Array([
              118, 97, 117, 108, 116, 95, 103, 100, 116, 95, 116, 107, 58,
            ])
          ),
          getAddressEncoder().encode(
            expectAddress(accounts.launchPadToken.value)
          ),
        ],
      }
    );
  }
  if (!accounts.vaultAssetGraduationTokenAccount.value) {
    accounts.vaultAssetGraduationTokenAccount.value =
      await getProgramDerivedAddress({
        programAddress,
        seeds: [
          getBytesEncoder().encode(
            new Uint8Array([
              118, 97, 117, 108, 116, 95, 97, 115, 115, 101, 116, 95, 103, 100,
              116, 58,
            ])
          ),
          getAddressEncoder().encode(
            expectAddress(accounts.launchPadToken.value)
          ),
        ],
      });
  }
  if (!accounts.createPoolFee.value) {
    accounts.createPoolFee.value =
      '3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy' as Address<'3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy'>;
  }
  if (!accounts.observationState.value) {
    accounts.observationState.value = await getProgramDerivedAddress({
      programAddress:
        'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb' as Address<'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.poolState.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.launchPadConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vaultGraduation),
      getAccountMeta(accounts.launchPadToken),
      getAccountMeta(accounts.launchPadTokenAccount),
      getAccountMeta(accounts.cpmmProgram),
      getAccountMeta(accounts.ammConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.wsolMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.vaultGraduationTokenAccount),
      getAccountMeta(accounts.vaultAssetGraduationTokenAccount),
      getAccountMeta(accounts.lpToken),
      getAccountMeta(accounts.token0Vault),
      getAccountMeta(accounts.token1Vault),
      getAccountMeta(accounts.createPoolFee),
      getAccountMeta(accounts.observationState),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenProgram2022),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getGraduateToRaydiumInstructionDataEncoder().encode({}),
  } as GraduateToRaydiumInstruction<
    TProgramAddress,
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountCpmmProgram,
    TAccountAmmConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountWsolMint,
    TAccountLpMint,
    TAccountVaultGraduationTokenAccount,
    TAccountVaultAssetGraduationTokenAccount,
    TAccountLpToken,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountCreatePoolFee,
    TAccountObservationState,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type GraduateToRaydiumInput<
  TAccountInvestor extends string = string,
  TAccountLaunchPadConfig extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountVaultGraduation extends string = string,
  TAccountLaunchPadToken extends string = string,
  TAccountLaunchPadTokenAccount extends string = string,
  TAccountCpmmProgram extends string = string,
  TAccountAmmConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountWsolMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountVaultGraduationTokenAccount extends string = string,
  TAccountVaultAssetGraduationTokenAccount extends string = string,
  TAccountLpToken extends string = string,
  TAccountToken0Vault extends string = string,
  TAccountToken1Vault extends string = string,
  TAccountCreatePoolFee extends string = string,
  TAccountObservationState extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  investor: TransactionSigner<TAccountInvestor>;
  launchPadConfig: Address<TAccountLaunchPadConfig>;
  vault: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  vaultGraduation: Address<TAccountVaultGraduation>;
  launchPadToken: Address<TAccountLaunchPadToken>;
  launchPadTokenAccount: Address<TAccountLaunchPadTokenAccount>;
  cpmmProgram?: Address<TAccountCpmmProgram>;
  /** Which config the pool belongs to. */
  ammConfig: Address<TAccountAmmConfig>;
  authority: Address<TAccountAuthority>;
  poolState: Address<TAccountPoolState>;
  wsolMint: Address<TAccountWsolMint>;
  lpMint: Address<TAccountLpMint>;
  vaultGraduationTokenAccount: Address<TAccountVaultGraduationTokenAccount>;
  vaultAssetGraduationTokenAccount: Address<TAccountVaultAssetGraduationTokenAccount>;
  lpToken: Address<TAccountLpToken>;
  token0Vault: Address<TAccountToken0Vault>;
  token1Vault: Address<TAccountToken1Vault>;
  /** create pool fee account */
  createPoolFee?: Address<TAccountCreatePoolFee>;
  observationState: Address<TAccountObservationState>;
  tokenProgram?: Address<TAccountTokenProgram>;
  tokenProgram2022?: Address<TAccountTokenProgram2022>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export function getGraduateToRaydiumInstruction<
  TAccountInvestor extends string,
  TAccountLaunchPadConfig extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountVaultGraduation extends string,
  TAccountLaunchPadToken extends string,
  TAccountLaunchPadTokenAccount extends string,
  TAccountCpmmProgram extends string,
  TAccountAmmConfig extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountWsolMint extends string,
  TAccountLpMint extends string,
  TAccountVaultGraduationTokenAccount extends string,
  TAccountVaultAssetGraduationTokenAccount extends string,
  TAccountLpToken extends string,
  TAccountToken0Vault extends string,
  TAccountToken1Vault extends string,
  TAccountCreatePoolFee extends string,
  TAccountObservationState extends string,
  TAccountTokenProgram extends string,
  TAccountTokenProgram2022 extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
>(
  input: GraduateToRaydiumInput<
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountCpmmProgram,
    TAccountAmmConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountWsolMint,
    TAccountLpMint,
    TAccountVaultGraduationTokenAccount,
    TAccountVaultAssetGraduationTokenAccount,
    TAccountLpToken,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountCreatePoolFee,
    TAccountObservationState,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): GraduateToRaydiumInstruction<
  TProgramAddress,
  TAccountInvestor,
  TAccountLaunchPadConfig,
  TAccountVault,
  TAccountMint,
  TAccountVaultGraduation,
  TAccountLaunchPadToken,
  TAccountLaunchPadTokenAccount,
  TAccountCpmmProgram,
  TAccountAmmConfig,
  TAccountAuthority,
  TAccountPoolState,
  TAccountWsolMint,
  TAccountLpMint,
  TAccountVaultGraduationTokenAccount,
  TAccountVaultAssetGraduationTokenAccount,
  TAccountLpToken,
  TAccountToken0Vault,
  TAccountToken1Vault,
  TAccountCreatePoolFee,
  TAccountObservationState,
  TAccountTokenProgram,
  TAccountTokenProgram2022,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LAUNCHPAD_FUN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    investor: { value: input.investor ?? null, isWritable: true },
    launchPadConfig: {
      value: input.launchPadConfig ?? null,
      isWritable: false,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vaultGraduation: { value: input.vaultGraduation ?? null, isWritable: true },
    launchPadToken: { value: input.launchPadToken ?? null, isWritable: true },
    launchPadTokenAccount: {
      value: input.launchPadTokenAccount ?? null,
      isWritable: true,
    },
    cpmmProgram: { value: input.cpmmProgram ?? null, isWritable: false },
    ammConfig: { value: input.ammConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    wsolMint: { value: input.wsolMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    vaultGraduationTokenAccount: {
      value: input.vaultGraduationTokenAccount ?? null,
      isWritable: true,
    },
    vaultAssetGraduationTokenAccount: {
      value: input.vaultAssetGraduationTokenAccount ?? null,
      isWritable: true,
    },
    lpToken: { value: input.lpToken ?? null, isWritable: true },
    token0Vault: { value: input.token0Vault ?? null, isWritable: true },
    token1Vault: { value: input.token1Vault ?? null, isWritable: true },
    createPoolFee: { value: input.createPoolFee ?? null, isWritable: true },
    observationState: {
      value: input.observationState ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram2022.value) {
    accounts.tokenProgram2022.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.cpmmProgram.value) {
    accounts.cpmmProgram.value =
      'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb' as Address<'DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb'>;
  }
  if (!accounts.createPoolFee.value) {
    accounts.createPoolFee.value =
      '3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy' as Address<'3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.launchPadConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vaultGraduation),
      getAccountMeta(accounts.launchPadToken),
      getAccountMeta(accounts.launchPadTokenAccount),
      getAccountMeta(accounts.cpmmProgram),
      getAccountMeta(accounts.ammConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.wsolMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.vaultGraduationTokenAccount),
      getAccountMeta(accounts.vaultAssetGraduationTokenAccount),
      getAccountMeta(accounts.lpToken),
      getAccountMeta(accounts.token0Vault),
      getAccountMeta(accounts.token1Vault),
      getAccountMeta(accounts.createPoolFee),
      getAccountMeta(accounts.observationState),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenProgram2022),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getGraduateToRaydiumInstructionDataEncoder().encode({}),
  } as GraduateToRaydiumInstruction<
    TProgramAddress,
    TAccountInvestor,
    TAccountLaunchPadConfig,
    TAccountVault,
    TAccountMint,
    TAccountVaultGraduation,
    TAccountLaunchPadToken,
    TAccountLaunchPadTokenAccount,
    TAccountCpmmProgram,
    TAccountAmmConfig,
    TAccountAuthority,
    TAccountPoolState,
    TAccountWsolMint,
    TAccountLpMint,
    TAccountVaultGraduationTokenAccount,
    TAccountVaultAssetGraduationTokenAccount,
    TAccountLpToken,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountCreatePoolFee,
    TAccountObservationState,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedGraduateToRaydiumInstruction<
  TProgram extends string = typeof LAUNCHPAD_FUN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    investor: TAccountMetas[0];
    launchPadConfig: TAccountMetas[1];
    vault: TAccountMetas[2];
    mint: TAccountMetas[3];
    vaultGraduation: TAccountMetas[4];
    launchPadToken: TAccountMetas[5];
    launchPadTokenAccount: TAccountMetas[6];
    cpmmProgram: TAccountMetas[7];
    /** Which config the pool belongs to. */
    ammConfig: TAccountMetas[8];
    authority: TAccountMetas[9];
    poolState: TAccountMetas[10];
    wsolMint: TAccountMetas[11];
    lpMint: TAccountMetas[12];
    vaultGraduationTokenAccount: TAccountMetas[13];
    vaultAssetGraduationTokenAccount: TAccountMetas[14];
    lpToken: TAccountMetas[15];
    token0Vault: TAccountMetas[16];
    token1Vault: TAccountMetas[17];
    /** create pool fee account */
    createPoolFee: TAccountMetas[18];
    observationState: TAccountMetas[19];
    tokenProgram: TAccountMetas[20];
    tokenProgram2022: TAccountMetas[21];
    associatedTokenProgram: TAccountMetas[22];
    systemProgram: TAccountMetas[23];
    rent: TAccountMetas[24];
  };
  data: GraduateToRaydiumInstructionData;
};

export function parseGraduateToRaydiumInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedGraduateToRaydiumInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 25) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      investor: getNextAccount(),
      launchPadConfig: getNextAccount(),
      vault: getNextAccount(),
      mint: getNextAccount(),
      vaultGraduation: getNextAccount(),
      launchPadToken: getNextAccount(),
      launchPadTokenAccount: getNextAccount(),
      cpmmProgram: getNextAccount(),
      ammConfig: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      wsolMint: getNextAccount(),
      lpMint: getNextAccount(),
      vaultGraduationTokenAccount: getNextAccount(),
      vaultAssetGraduationTokenAccount: getNextAccount(),
      lpToken: getNextAccount(),
      token0Vault: getNextAccount(),
      token1Vault: getNextAccount(),
      createPoolFee: getNextAccount(),
      observationState: getNextAccount(),
      tokenProgram: getNextAccount(),
      tokenProgram2022: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getGraduateToRaydiumInstructionDataDecoder().decode(instruction.data),
  };
}
