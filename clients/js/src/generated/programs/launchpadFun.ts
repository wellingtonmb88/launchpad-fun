/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateLaunchPadTokenInstruction,
  type ParsedInitializeInstruction,
} from '../instructions';

export const LAUNCHPAD_FUN_PROGRAM_ADDRESS =
  'HqY2bef2WwBtVSLJhii8GJ2aG3wFgDNECHYHc6Y1zHkR' as Address<'HqY2bef2WwBtVSLJhii8GJ2aG3wFgDNECHYHc6Y1zHkR'>;

export enum LaunchpadFunAccount {
  LaunchPadConfig,
  LaunchPadToken,
}

export function identifyLaunchpadFunAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LaunchpadFunAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])),
      0
    )
  ) {
    return LaunchpadFunAccount.LaunchPadConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([2])),
      0
    )
  ) {
    return LaunchpadFunAccount.LaunchPadToken;
  }
  throw new Error(
    'The provided account could not be identified as a launchpadFun account.'
  );
}

export enum LaunchpadFunInstruction {
  CreateLaunchPadToken,
  Initialize,
}

export function identifyLaunchpadFunInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LaunchpadFunInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([79, 101, 154, 215, 208, 226, 116, 159])
      ),
      0
    )
  ) {
    return LaunchpadFunInstruction.CreateLaunchPadToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return LaunchpadFunInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a launchpadFun instruction.'
  );
}

export type ParsedLaunchpadFunInstruction<
  TProgram extends string = 'HqY2bef2WwBtVSLJhii8GJ2aG3wFgDNECHYHc6Y1zHkR',
> =
  | ({
      instructionType: LaunchpadFunInstruction.CreateLaunchPadToken;
    } & ParsedCreateLaunchPadTokenInstruction<TProgram>)
  | ({
      instructionType: LaunchpadFunInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>);
